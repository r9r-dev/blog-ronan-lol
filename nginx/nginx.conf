events {
    worker_connections 1024;
}

http {
    upstream blog_backend {
        server blog:3000;
    }

    server {
        listen 80;
        server_name localhost;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types text/plain text/css text/xml text/javascript application/javascript application/json application/xml+rss;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;

        # Rate limiting zone (optional - requires nginx-plus or compile with module)
        # limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;

        # Proxy settings
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        # Main application
        location / {
            proxy_pass http://blog_backend;
            
            # WebSocket support (if needed in future)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }

        # API specific settings
        location /api/ {
            proxy_pass http://blog_backend;
            
            # Optional rate limiting
            # limit_req zone=api burst=20 nodelay;
            
            # Disable buffering for SSE/streaming
            proxy_buffering off;
            
            # CORS headers (if needed)
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Authorization, Content-Type" always;
            
            if ($request_method = OPTIONS) {
                return 204;
            }
        }

        # Health check endpoint
        location /health {
            proxy_pass http://blog_backend/api/health;
            access_log off;
        }

        # Cache static assets (when served by Node.js)
        location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
            proxy_pass http://blog_backend;
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
    }
}